generator client {
provider = "prisma-client-js"
}

datasource db {
provider = "postgresql"
url      = env("DATABASE_URL")
}

// =========================================================================
// ENUMERACIONES DEL SISTEMA CORE
// =========================================================================

enum UserRole {
SUPERADMIN           // Administrador del sistema
CONCURSO_ADMIN       // Administrador de compañía
REGISTRADOR          // Registrador de participantes
}

enum SubscriptionStatus {
ACTIVO
EXPIRADO
SUSPENDIDO
CANCELADO
}

enum SubscriptionPlan {
BASICO
PROFESIONAL
EMPRESARIAL
}

enum CompanyRequestStatus {
PENDIENTE            // Solicitud enviada, esperando aprobación
APROBADA             // Solicitud aprobada, compañía creada
RECHAZADA            // Solicitud rechazada
EN_REVISION          // En proceso de revisión
}

enum NotificationType {
USER_CREATED         // Usuario creado
USER_UPDATED         // Usuario actualizado
USER_DELETED         // Usuario eliminado
COMPANY_CREATED      // Compañía creada
COMPANY_UPDATED      // Compañía actualizada
SUBSCRIPTION_CREATED // Suscripción creada
SUBSCRIPTION_UPDATED // Suscripción actualizada
SUBSCRIPTION_EXPIRED // Suscripción expirada
SYSTEM_ALERT         // Alerta del sistema
PAYMENT_RECEIVED     // Pago recibido
PAYMENT_FAILED       // Pago fallido
CONTEST_CREATED      // Concurso creado
CONTEST_UPDATED      // Concurso actualizado
CONTEST_PUBLISHED    // Concurso publicado
}

enum NotificationStatus {
UNREAD
READ
ARCHIVED
}

enum ContestStatus {
BORRADOR             // En preparación
PUBLICADO            // Publicado y visible
INSCRIPCIONES_ABIERTAS // Inscripciones abiertas
INSCRIPCIONES_CERRADAS // Inscripciones cerradas
EN_CURSO             // Concurso en desarrollo
FINALIZADO           // Concurso terminado
CANCELADO            // Concurso cancelado
}

enum TipoGanado {
BOVINO
EQUINO
PORCINO
OVINO
CAPRINO
AVIAR
MASCOTAS
OTROS
}

// NUEVA ENUMERACIÓN PARA SEXO DE GANADO
enum SexoGanado {
MACHO
HEMBRA
MIXTO // Para categorías que aceptan ambos o no especifican
}

// NUEVA ENUMERACIÓN PARA TIPO DE PUNTAJE
enum TipoPuntaje {
NUMERICO             // Puntaje numérico (0-100)
POSICION             // Posición (1er lugar, 2do lugar, etc.)
CALIFICACION         // Calificación (A, B, C, etc.)
PUNTOS               // Sistema de puntos personalizado
}

// =========================================================================
// MODELO DE USUARIO (OPTIMIZADO PARA ADMIN DASHBOARD)
// =========================================================================

model User {
id        String   @id @default(cuid())
email     String   @unique
password  String
nombre    String
apellido  String
telefono  String?
role      UserRole @default(REGISTRADOR)
companyId String?
company   Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)
isActive  Boolean  @default(true)

// Campos adicionales para SUPERADMIN
isSuperAdmin Boolean @default(false)   // Flag adicional de seguridad

// Campos para gestión de acceso
contestAccess   Boolean  @default(false)  // Acceso a funcionalidades de concursos
lastLogin       DateTime?                  // Último inicio de sesión
emailVerified   Boolean  @default(false)   // Email verificado
profileImage    String?                    // URL de imagen de perfil (Cloudinary)

// Metadatos de usuario
preferences     Json?                      // Preferencias del usuario en JSON
metadata        Json?                      // Metadatos adicionales

createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

// Relaciones esenciales
passwordResetTokens     PasswordResetToken[]
companyRequestsReviewed CompanyRequest[]
notifications           Notification[]
auditLogs               AuditLog[]
companiesCreated        Company[]            @relation("CompanyCreator")
uploadedMedia           Media[]
contestsCreated         Contest[]            @relation("ContestCreator")
ganadoCreado            Ganado[]             @relation("GanadoCreator")
programImages           ProgramImage[]       @relation("ProgramImageUploader")
contestAssignments      UserContestAssignment[]

// ÍNDICES OPTIMIZADOS
@@index([email])
@@index([companyId])
@@index([role, isActive]) // Compuesto para consultas por rol y estado
@@index([lastLogin])
@@index([isSuperAdmin, isActive]) // Para búsquedas de superadmins activos
@@map("users")
}

// =========================================================================
// MODELO PARA TOKENS DE RESET DE CONTRASEÑA
// =========================================================================

model PasswordResetToken {
id        String   @id @default(cuid())
token     String   @unique
userId    String
user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
expiresAt DateTime
used      Boolean  @default(false)
createdAt DateTime @default(now())

// ÍNDICES OPTIMIZADOS
@@index([token])
@@index([userId, used]) // Compuesto para verificación de tokens
@@index([expiresAt, used]) // Para limpieza de tokens expirados
@@map("password_reset_tokens")
}

// =========================================================================
// MODELO DE COMPAÑÍA (OPTIMIZADO PARA ADMIN DASHBOARD)
// =========================================================================

model Company {
id          String             @id @default(cuid())
nombre      String
publicName  String?
slug        String             @unique
email       String
telefono    String?
direccion   String?
logo        String?
logoPublicId String?
descripcion String?            @db.Text
website     String?
ubicacion   String?
isFeatured  Boolean            @default(false)
isPublished Boolean            @default(false)
isActive    Boolean            @default(true)

// Información adicional para admin
tipoOrganizacion String?
nit             String?
representanteLegal String?
contactoPrincipal String?

// SEO y Marketing
metaTitle       String?
metaDescription String?
socialLinks     Json?

// Estadísticas y métricas
viewCount       Int             @default(0)
rating          Float?          @default(0)
reviewCount     Int             @default(0)

// Gestión administrativa
createdById     String?
createdBy       User?           @relation("CompanyCreator", fields: [createdById], references: [id])
approvedAt      DateTime?
approvedById    String?

createdAt   DateTime           @default(now())
updatedAt   DateTime           @updatedAt

// Suscripción
subscription   Subscription?
subscriptionId String?       @unique

// Relaciones
users     User[]
companyRequest CompanyRequest?
contests  Contest[]
propietarios Propietario[]
expositores  Expositor[]
ganado       Ganado[]
establos     Establo[]

// ÍNDICES OPTIMIZADOS
@@index([slug]) // ÚNICO - Para búsqueda por slug (crítico para performance)
@@index([email])
@@index([isPublished, isFeatured, isActive]) // Compuesto para listados públicos
@@index([createdById])
@@index([createdAt])
@@index([nit]) // Para búsquedas fiscales
@@map("companies")
}

// =========================================================================
// MODELO DE CONCURSOS
// =========================================================================

model Contest {
id                    String        @id @default(cuid())
nombre                String
slug                  String        @unique
descripcion           String?       @db.Text
imagenPrincipal       String?
imagenPublicId        String?

// Fechas importantes
fechaInicio           DateTime
fechaFin              DateTime?
fechaInicioRegistro   DateTime?
fechaFinRegistro      DateTime?

// Ubicación y logística
ubicacion             String?
direccion             String?
capacidadMaxima       Int?
cuotaInscripcion      Decimal?      @db.Decimal(10, 2)

// Información del concurso
tipoGanado            TipoGanado[]
categorias            String[]
premiacion            Json?
reglamento            String?       @db.Text
auspiciadores         Json?

// Sistema de puntaje del concurso
tipoPuntaje           TipoPuntaje   @default(NUMERICO)
puntajeMinimo         Float?        @default(0)
puntajeMaximo         Float?        @default(100)
posicionesDisponibles Int?          @default(10)
calificacionesCustom  String[]      @default([])

// Contacto
contactoOrganizador   String?
telefonoContacto      String?
emailContacto         String?

// Configuraciones
requisitoEspeciales   String?       @db.Text
isPublic              Boolean       @default(true)
isActive              Boolean       @default(true)
isFeatured            Boolean       @default(false)
permitirRegistroTardio Boolean      @default(false)

// Estado del concurso
status                ContestStatus @default(BORRADOR)

// SEO y Marketing
metaTitle             String?
metaDescription       String?
tags                  String[]

// Estadísticas
viewCount             Int           @default(0)
participantCount      Int           @default(0)
registrationCount     Int           @default(0)

// Relaciones
companyId             String
company               Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)

createdById           String?
createdBy             User?         @relation("ContestCreator", fields: [createdById], references: [id])

events                Event[]
contestCategories     ContestCategory[]
ganadoParticipante    Ganado[]          @relation("ContestParticipants")
userAssignments       UserContestAssignment[]

createdAt             DateTime      @default(now())
updatedAt             DateTime      @updatedAt

// ÍNDICES SÚPER OPTIMIZADOS - CRÍTICOS PARA PERFORMANCE
@@index([slug]) // ÚNICO - Búsquedas por slug (MUY CRÍTICO)
@@index([companyId, isActive]) // Compuesto para concursos activos por compañía
@@index([status, isPublic, isActive]) // Compuesto para listados públicos
@@index([isFeatured, isActive, fechaInicio]) // Para concursos destacados ordenados por fecha
@@index([fechaInicio, fechaFin]) // Para consultas por rango de fechas
@@index([createdById])
@@index([createdAt])
@@index([isActive, fechaInicio]) // Para concursos activos por fecha
@@map("contests")
}

// =========================================================================
// MODELO DE CATEGORÍAS DE CONCURSO (NUEVO)
// =========================================================================
model ContestCategory {
  id            String    @id @default(cuid())
  nombre        String
  descripcion   String?   @db.Text
  orden         Int       @default(0)
  criteriosEdadMinMeses Int?
  criteriosEdadMaxMeses Int?
  criteriosPesoMinKg    Float?
  criteriosPesoMaxKg    Float?
  criteriosSexo         SexoGanado?

  contestId     String
  contest       Contest   @relation(fields: [contestId], references: [id], onDelete: Cascade)
  
  ganadoEnCategoria Ganado[] @relation("GanadoInCategory")

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // ÍNDICES OPTIMIZADOS
  @@unique([contestId, nombre]) // Evitar categorías duplicadas por concurso
  @@index([contestId, orden]) // Para ordenamiento eficiente
  @@map("contest_categories")
}

// =========================================================================
// MODELO DE SUSCRIPCIÓN (MEJORADO)
// =========================================================================

model Subscription {
id                String             @id @default(cuid())
companyId         String             @unique
company           Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
plan              SubscriptionPlan   @default(BASICO)
status            SubscriptionStatus @default(ACTIVO)

// Límites y uso
maxUsers          Int                @default(5)
usersUsed         Int                @default(0)
maxStorage        Int                @default(1000)
storageUsed       Int                @default(0)
maxConcursos      Int                @default(10)
concursosUsados   Int                @default(0)

// Fechas importantes
fechaInicio       DateTime           @default(now())
fechaExpiracion   DateTime
fechaRenovacion   DateTime?
lastPayment       DateTime?
nextPayment       DateTime?

// Información financiera
precio            Decimal            @db.Decimal(10, 2)
currency          String             @default("COP")
paymentMethod     String?
transactionId     String?

// Configuraciones
contestAccessEnabled Boolean            @default(true)
autoRenewal          Boolean            @default(false)
notificationsEnabled Boolean            @default(true)

// Notas administrativas
notas             String?            @db.Text
internalNotes     String?            @db.Text

createdAt         DateTime           @default(now())
updatedAt         DateTime           @updatedAt

// ÍNDICES OPTIMIZADOS
@@index([status, fechaExpiracion]) // Para alertas de expiración
@@index([plan, status]) // Para análisis por plan
@@index([nextPayment, autoRenewal]) // Para procesamiento de pagos
@@map("subscriptions")
}

// =========================================================================
// MODELO DE SOLICITUDES DE COMPAÑÍA (MEJORADO)
// =========================================================================

model CompanyRequest {
id                String               @id @default(cuid())
nombre            String
apellido          String
email             String               @unique
telefono          String?
nombreCompania    String
descripcionCompania String?            @db.Text
tipoOrganizacion  String?
ubicacion         String?
website           String?
nit               String?
documentos        String[]
documentosPublicIds String[]
motivacion        String?              @db.Text
experiencia       String?              @db.Text
status            CompanyRequestStatus @default(PENDIENTE)
notas             String?              @db.Text
internalNotes     String?              @db.Text
reviewedById      String?
reviewedBy        User?                @relation(fields: [reviewedById], references: [id])
reviewedAt        DateTime?
companyId         String?              @unique
company           Company?             @relation(fields: [companyId], references: [id])

priority          Int                  @default(1)
tags              String[]

createdAt         DateTime             @default(now())
updatedAt         DateTime             @updatedAt

// ÍNDICES OPTIMIZADOS
@@index([status, priority, createdAt]) // Para cola de revisión priorizada
@@index([email])
@@index([reviewedById, reviewedAt]) // Para seguimiento de revisiones
@@map("company_requests")
}

// =========================================================================
// MODELO DE NOTIFICACIONES (MEJORADO)
// =========================================================================

model Notification {
id          String             @id @default(cuid())
type        NotificationType
title       String
message     String             @db.Text
status      NotificationStatus @default(UNREAD)
metadata    Json?
userId      String?
user        User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
entityType  String?
entityId    String?
priority    Int                @default(1)
expiresAt   DateTime?
actionUrl   String?
createdAt   DateTime           @default(now())
readAt      DateTime?

// ÍNDICES OPTIMIZADOS
@@index([userId, status, priority, createdAt]) // Para listado eficiente de notificaciones
@@index([type, createdAt]) // Para análisis por tipo
@@index([expiresAt]) // Para limpieza automática
@@map("notifications")
}

// =========================================================================
// MODELO DE AUDITORÍA (MEJORADO)
// =========================================================================

model AuditLog {
id          String   @id @default(cuid())
action      String
entityType  String
entityId    String
oldValues   Json?
newValues   Json?
changes     Json?
userId      String
user        User     @relation(fields: [userId], references: [id])
ipAddress   String?
userAgent   String?
sessionId   String?
requestId   String?
description String?
severity    String   @default("info")
category    String?
createdAt   DateTime @default(now())

// ÍNDICES OPTIMIZADOS
@@index([entityType, entityId, createdAt]) // Para historial de entidades
@@index([userId, createdAt]) // Para actividad por usuario
@@index([action, severity, createdAt]) // Para análisis de acciones
@@index([createdAt]) // Para consultas temporales
@@map("audit_logs")
}

// =========================================================================
// MODELO DE ALERTAS DEL SISTEMA (MEJORADO)
// =========================================================================

model Alert {
id          String   @id @default(cuid())
type        String
title       String
description String   @db.Text
date        DateTime @default(now())
priority    String
isActive    Boolean  @default(true)
isResolved  Boolean  @default(false)
category    String?
entityType  String?
entityId    String?
actionUrl   String?
resolvedAt  DateTime?
resolvedBy  String?
resolution  String?  @db.Text
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // ÍNDICES OPTIMIZADOS
  @@index([isActive, priority, createdAt]) // Para alertas activas por prioridad
  @@index([type, isResolved]) // Para análisis por tipo
  @@index([entityType, entityId]) // Para alertas por entidad
  @@map("alerts")
}

// =========================================================================
// MODELO DE ARCHIVOS/MEDIOS (NUEVO - PARA CLOUDINARY)
// =========================================================================

model Media {
id          String   @id @default(cuid())
filename    String
publicId    String   @unique
url         String
secureUrl   String
format      String
resourceType String  @default("image")
bytes       Int
width       Int?
height       Int?
entityType  String?
entityId    String?
folder      String?
tags        String[]
uploadedById String?
uploadedBy   User?   @relation(fields: [uploadedById], references: [id])
alt         String?
caption     String?
metadata    Json?
createdAt   DateTime @default(now())
updatedAt   DateTime @updatedAt

// ÍNDICES OPTIMIZADOS
@@index([publicId]) // Único
@@index([entityType, entityId]) // Para archivos por entidad
@@index([uploadedById, createdAt]) // Para archivos por usuario
@@index([folder, createdAt]) // Para organización por carpetas
@@map("media")
}

// =========================================================================
// MODELO DE IMÁGENES DE PROGRAMACIÓN (NUEVO)
// =========================================================================
model ProgramImage {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  imageUrl    String
  publicId    String   @unique
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  eventDate   DateTime?
  eventTime   String?
  location    String?
  uploadedById String?
  uploadedBy   User?    @relation("ProgramImageUploader", fields: [uploadedById], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // ÍNDICES OPTIMIZADOS
  @@index([isActive, order]) // Para listado ordenado de imágenes activas
  @@index([eventDate, isActive]) // Para eventos por fecha
  @@index([uploadedById])
  @@map("program_images")
}

// =========================================================================
// MODELO DE EVENTOS DEL CONCURSO
// =========================================================================

model Event {
  id            String    @id @default(cuid())
  title         String
  description   String?   @db.Text
  featuredImage String?
  startDate     DateTime
  endDate       DateTime?
  contestId     String
  contest       Contest   @relation(fields: [contestId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // ÍNDICES OPTIMIZADOS
  @@index([contestId, startDate]) // Para eventos por concurso ordenados por fecha
  @@map("events")
}

// =========================================================================
// MODELO DE ESTABLO (NUEVO)
// =========================================================================
model Establo {
  id              String    @id @default(cuid())
  nombre          String
  descripcion     String?   @db.Text
  ubicacion       String?
  direccion       String?
  telefono        String?
  email           String?
  propietario     String?
  capacidad       Int?
  tipoGanado      TipoGanado[]
  certificaciones String[]
  companyId       String?
  company         Company?  @relation(fields: [companyId], references: [id])
  ganado          Ganado[]  @relation("EstabloGanado")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // ÍNDICES OPTIMIZADOS
  @@index([companyId, nombre]) // Para búsqueda de establos por compañía
  @@unique([companyId, nombre], name: "companyId_nombre")
  @@map("establos")
}

// =========================================================================
// MODELO DE PROPIETARIO (NUEVO)
// =========================================================================
model Propietario {
  id              String    @id @default(cuid())
  nombreCompleto  String
  documentoLegal  String?
  telefono        String?
  email           String?   @unique
  direccion       String?
  datosBancarios  Json?
  companyId       String?
  company         Company?  @relation(fields: [companyId], references: [id])
  ganado          Ganado[]  @relation("PropietarioDeGanado")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // ÍNDICES OPTIMIZADOS
  @@index([email])
  @@index([companyId, nombreCompleto]) // Para búsqueda eficiente
  @@unique([companyId, nombreCompleto], name: "companyId_nombreCompleto")
  @@map("propietarios")
}

// =========================================================================
// MODELO DE EXPOSITOR (NUEVO)
// =========================================================================
model Expositor {
  id                  String    @id @default(cuid())
  nombreCompleto      String
  documentoIdentidad  String?
  telefono            String?
  email               String?   @unique
  empresa             String?
  experiencia         String?   @db.Text
  certificaciones     String[]
  companyId           String?
  company             Company?  @relation(fields: [companyId], references: [id])
  ganadoExpuesto      Ganado[]  @relation("ExpositorDeGanado")
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // ÍNDICES OPTIMIZADOS
  @@index([email])
  @@index([companyId, nombreCompleto]) // Para búsqueda eficiente
  @@unique([companyId, nombreCompleto], name: "companyId_nombreCompleto")
  @@map("expositores")
}

// =========================================================================
// MODELO DE GANADO (SÚPER OPTIMIZADO PARA PARTICIPANTES)
// =========================================================================
model Ganado {
  id                String    @id @default(cuid())
  nombre            String
  numeroFicha       String
  tipoAnimal        String?
  raza              String?
  sexo              SexoGanado?
  fechaNacimiento   DateTime?
  pesoKg            Float?
  descripcion       String?   @db.Text
  imagenUrl         String?
  imagenPublicId    String?
  marcasDistintivas String?
  padre             String?
  madre             String?
  lineaGenetica     String?
  enRemate          Boolean   @default(false)
  precioBaseRemate  Decimal?  @db.Decimal(12, 2)
  isDestacado       Boolean   @default(false)
  isGanador         Boolean   @default(false)
  premiosObtenidos  String[]
  puntaje           Float?
  posicion          Int?
  calificacion      String?

  // Relaciones
  companyId         String?
  company           Company?  @relation(fields: [companyId], references: [id])
  propietarioId     String?
  propietario       Propietario? @relation("PropietarioDeGanado", fields: [propietarioId], references: [id])
  expositorId       String?
  expositor         Expositor?   @relation("ExpositorDeGanado", fields: [expositorId], references: [id])
  establoId         String?
  establo           Establo?     @relation("EstabloGanado", fields: [establoId], references: [id])
  contestId         String
  contest           Contest   @relation("ContestParticipants", fields: [contestId], references: [id], onDelete: Cascade)
  contestCategoryId String?
  contestCategory   ContestCategory? @relation("GanadoInCategory", fields: [contestCategoryId], references: [id])
  createdById       String?
  createdBy         User?     @relation("GanadoCreator", fields: [createdById], references: [id])
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // ÍNDICES SÚPER OPTIMIZADOS - MUY CRÍTICOS
  @@unique([contestId, numeroFicha], name: "contest_ficha_unique")
  @@index([contestId, createdAt]) // Para participantes por concurso ordenados por fecha (MUY CRÍTICO)
  @@index([contestId, contestCategoryId]) // Para filtros por categoría
  @@index([contestId, raza]) // Para filtros por raza
  @@index([contestId, sexo]) // Para filtros por sexo
  @@index([contestId, tipoAnimal]) // Para filtros por tipo
  @@index([contestId, isDestacado, isGanador]) // Para filtros de estado
  @@index([contestId, enRemate]) // Para filtros de remate
  @@index([contestId, puntaje]) // Para ordenamiento por puntaje
  @@index([contestId, posicion]) // Para ordenamiento por posición
  @@index([companyId])
  @@index([propietarioId])
  @@index([expositorId])
  @@index([establoId])
  @@map("ganado")
}

// =========================================================================
// MODELO DE ASIGNACIÓN USUARIO-CONCURSO (NUEVO)
// =========================================================================
model UserContestAssignment {
  id        String   @id @default(cuid())
  userId    String
  contestId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  contest   Contest  @relation(fields: [contestId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now())
  assignedBy String?  // ID del usuario que hizo la asignación
  isActive   Boolean  @default(true)
  notes      String?  @db.Text
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // ÍNDICES OPTIMIZADOS
  @@unique([userId, contestId]) // Evitar asignaciones duplicadas
  @@index([userId, isActive]) // Para consultas de concursos asignados por usuario
  @@index([contestId, isActive]) // Para consultas de usuarios asignados por concurso
  @@index([assignedAt]) // Para ordenamiento por fecha de asignación
  @@map("user_contest_assignments")
}
